package com.gitlab.notscripter.composecli

import com.github.ajalt.clikt.command.SuspendingCliktCommand
import com.github.ajalt.clikt.command.main
import com.github.ajalt.clikt.core.Context
import com.github.ajalt.clikt.core.subcommands
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.options.prompt
import java.io.File

fun sh(command: String): String =
    Runtime
        .getRuntime()
        .exec(arrayOf("bash", "-c", command))
        .inputStream
        .bufferedReader()
        .readText()

data class Template(
    val name: String,
    val desc: String,
    val url: String,
)

class Compose : SuspendingCliktCommand() {
    override fun help(context: Context) = "A tool for compose and compose multiplatform"

    override suspend fun run() = Unit
}

class Init : SuspendingCliktCommand() {
    override fun help(context: Context) = "Create new compose project"

    private val name by option().prompt("Enter name for your project")
    private val id by option().prompt("Enter package id (org.example.myapp)")
    private val kmp by option("-kmp", "--kotlin-multi-platform")

    override suspend fun run() {
        val templates =
            listOf(
                Template("compose-template", "Android with compose", "https://gitlab.com/notscripter/compose-template.git"),
            )

        echo("\nAvailable Templates:\n")
        templates.forEachIndexed { index, t ->
            echo("[${index + 1}] ${t.name.padEnd(10)} - ${t.desc}")
        }

        echo("\nChoose a template [1-${templates.size}]: ")
        val choice = readln().toIntOrNull()

        val selected = templates.getOrNull((choice ?: -1) - 1)
        if (selected == null) {
            echo("❌ Invalid selection. Exiting.")
            return
        }

        val home = System.getProperty("user.home")
        val source = File("$home/.namaste/templates/${selected.name}")
        val target = File("./$name")

        echo("⏳ Copying ${selected.name} template to ${target.name} ...")
        // source.copyRecursively(target, overwrite = true)
        echo("✅ Done! Project created at ./${target.name}")
        echo(kmp)
    }
}

suspend fun main(args: Array<String>) = Compose().subcommands(Init()).main(args)
